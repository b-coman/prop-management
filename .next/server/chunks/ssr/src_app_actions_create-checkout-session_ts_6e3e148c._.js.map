{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions/create-checkout-session.ts"],"sourcesContent":["\n\"use server\";\n\nimport type { Property } from '@/types';\nimport { headers } from 'next/headers';\nimport Stripe from 'stripe';\n\nconst stripeSecretKey = process.env.STRIPE_SECRET_KEY;\nif (!stripeSecretKey) {\n  throw new Error('STRIPE_SECRET_KEY is not set in environment variables.');\n}\n\nconst stripe = new Stripe(stripeSecretKey);\n\ninterface CreateCheckoutSessionInput {\n  property: Property;\n  checkInDate: string; // ISO string format\n  checkOutDate: string; // ISO string format\n  numberOfGuests: number;\n  totalPrice: number; // FINAL price in dollars (after discount)\n  numberOfNights: number;\n  // Optional guest info now expected\n  guestFirstName?: string;\n  guestLastName?: string;\n  guestEmail?: string; // Pass guest email if available\n  // Optional coupon info\n  appliedCouponCode?: string;\n  discountPercentage?: number;\n  // Optional pending booking ID\n  pendingBookingId?: string; // Added to link Stripe session to pending booking\n}\n\nexport async function createCheckoutSession(input: CreateCheckoutSessionInput) {\n  const {\n    property,\n    checkInDate,\n    checkOutDate,\n    numberOfGuests,\n    totalPrice,\n    numberOfNights,\n    guestEmail,\n    guestFirstName,\n    guestLastName,\n    appliedCouponCode,\n    discountPercentage,\n    pendingBookingId, // Get the pending booking ID\n  } = input;\n\n  const origin = headers().get('origin') || 'http://localhost:9002';\n\n  const numberOfExtraGuests = Math.max(0, numberOfGuests - property.baseOccupancy);\n\n  // --- Prepare metadata ---\n  const metadata: Stripe.MetadataParam = {\n    propertyId: property.id,\n    propertyName: property.name,\n    checkInDate: checkInDate,\n    checkOutDate: checkOutDate,\n    numberOfGuests: String(numberOfGuests),\n    numberOfNights: String(numberOfNights),\n    totalPrice: String(totalPrice),\n    cleaningFee: String(property.cleaningFee),\n    pricePerNight: String(property.pricePerNight),\n    baseOccupancy: String(property.baseOccupancy),\n    extraGuestFee: String(property.extraGuestFee),\n    numberOfExtraGuests: String(numberOfExtraGuests),\n    guestFirstName: guestFirstName || '',\n    guestLastName: guestLastName || '',\n    // Add pendingBookingId to metadata\n    pendingBookingId: pendingBookingId || '', // Include if available\n    // userId: loggedInUserId || '', // Add user ID if available\n  };\n\n  if (appliedCouponCode && discountPercentage !== undefined) {\n    metadata.appliedCouponCode = appliedCouponCode;\n    metadata.discountPercentage = String(discountPercentage);\n  }\n\n  // --- Construct Success URL ---\n  // Keep success URL simple, rely on webhook and booking ID for confirmation logic\n  const success_url = `${origin}/booking/success?session_id={CHECKOUT_SESSION_ID}${pendingBookingId ? `&booking_id=${pendingBookingId}` : ''}`; // Optionally pass booking ID\n  const cancel_url = `${origin}/booking/cancel?property_slug=${property.slug}${pendingBookingId ? `&booking_id=${pendingBookingId}` : ''}`; // Pass booking ID to cancel if needed\n\n  try {\n    const session = await stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      line_items: [\n        {\n          price_data: {\n            currency: 'usd',\n            product_data: {\n              name: `${property.name} (${numberOfNights} nights, ${numberOfGuests} guests)${appliedCouponCode ? ` - Coupon: ${appliedCouponCode}` : ''}`,\n              description: `Booking from ${new Date(checkInDate).toLocaleDateString()} to ${new Date(checkOutDate).toLocaleDateString()}. Ref: ${pendingBookingId || 'N/A'}`, // Add ref\n              images: [property.images.find(img => img.isFeatured)?.url || property.images[0]?.url || ''],\n            },\n            unit_amount: Math.round(totalPrice * 100),\n          },\n          quantity: 1,\n        },\n      ],\n      mode: 'payment',\n      success_url: success_url,\n      cancel_url: cancel_url,\n      customer_email: guestEmail,\n      phone_number_collection: { enabled: true,}, // Keep phone collection\n      metadata: metadata, // Pass the prepared metadata including pendingBookingId\n    });\n\n    if (!session.id) {\n        throw new Error('Failed to create Stripe session.');\n    }\n\n    // Link session to pending booking if ID provided\n    if (pendingBookingId && session.payment_intent) {\n        // You might want to update the pending booking with the payment_intent ID here\n        // This provides another link between the booking and the payment attempt.\n        // Example (requires an update action):\n        // await updatePendingBookingWithPaymentIntent(pendingBookingId, session.payment_intent as string);\n        console.log(`[createCheckoutSession] Stripe session ${session.id} created, linked to pending booking ${pendingBookingId} via metadata. Payment Intent: ${session.payment_intent}`);\n    }\n\n    return { sessionId: session.id };\n  } catch (error) {\n    console.error('Error creating Stripe Checkout session:', error);\n    return { error: `Failed to create checkout session: ${error instanceof Error ? error.message : String(error)}` };\n  }\n}\n\n// Optional helper action (if needed)\n// async function updatePendingBookingWithPaymentIntent(bookingId: string, paymentIntentId: string) {\n//   try {\n//     const bookingRef = doc(db, 'bookings', bookingId);\n//     await updateDoc(bookingRef, {\n//       'paymentInfo.stripePaymentIntentId': paymentIntentId,\n//       updatedAt: serverTimestamp(),\n//     });\n//     console.log(`[updatePendingBooking] Updated booking ${bookingId} with Payment Intent ID: ${paymentIntentId}`);\n//   } catch (error) {\n//     console.error(`[updatePendingBooking] Error updating booking ${bookingId} with Payment Intent ID:`, error);\n//     // Handle error appropriately, maybe log it or notify admin\n//   }\n// }\n"],"names":[],"mappings":";;;;;IAgCsB;CAgGtB,qCAAqC;CACrC,qGAAqG;CACrG,UAAU;CACV,yDAAyD;CACzD,oCAAoC;CACpC,8DAA8D;CAC9D,sCAAsC;CACtC,UAAU;CACV,qHAAqH;CACrH,sBAAsB;CACtB,kHAAkH;CAClH,kEAAkE;CAClE,MAAM;CACN,IAAI","debugId":null}}]
}