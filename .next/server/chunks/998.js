exports.id=998,exports.ids=[998],exports.modules={8010:(e,t,a)=>{"use strict";let n,o;a.d(t,{db:()=>o});var i=a(89579),r=a(34717);let s={apiKey:"AIzaSyDCteU3dj_3lAMDzdjW3hLPgci5mGuPUUo",authDomain:"rentalspot-fzwom.firebaseapp.com",projectId:"rentalspot-fzwom",storageBucket:"rentalspot-fzwom.firebasestorage.app",messagingSenderId:"1061532538391",appId:"1:1061532538391:web:aff9b573f7b4c09f99ae52"};if(0===(0,i.Dk)().length){if(s.apiKey&&s.projectId)try{n=(0,i.Wp)(s)}catch(e){console.error("❌ Firebase Client SDK initialization failed:",e)}else console.error("❌ Client Firebase Config Missing: NEXT_PUBLIC_FIREBASE_API_KEY or NEXT_PUBLIC_FIREBASE_PROJECT_ID is missing in environment variables. Client SDK cannot initialize.")}else n=(0,i.Sx)();if(n)try{o=(0,r.aU)(n)}catch(e){console.error("❌ Firestore Client SDK initialization failed:",e)}else console.error("❌ Cannot initialize Firestore Client SDK because Firebase app is not available.")},21926:(e,t,a)=>{"use strict";a.r(t),a.d(t,{"401d20e1638c4c996dd7a3daf3333614f89b89242a":()=>n.Rh,"403dfa05887180795253053b5ddc24cd97a1c22906":()=>o.pb,"40871143d9e5eb119e2d368471e521a52cc7d2696e":()=>n.sH,"408df2983918ea43b143e90c8540295eb73d5a7dd8":()=>o.lu,"4096a6d0e9ec81bee3869cbb98547ab1fe2434baeb":()=>o.E8,"40c72ba62947d37c07a62f3e271a5767237e39eaea":()=>n.m7,"40f23d64c4b8844f72c28aa963c436d2d8853e8833":()=>n.F4,"6065cd9e648ff6ec96b449427ed10a7b449e12e86b":()=>n.Y6,"606819dbf83ad474ae167838bed80207da16a704bf":()=>n.nz,"78064f30f4b57975911e6d7e67ff6b332ff90e420b":()=>n.wA,"78a512a53a154ec00ffc1df8a8e917ddf776cc0d8d":()=>o.DS,"78d4fef20c3c2302ee6890a1c6bb6fd94aa05c61a4":()=>o.Xh});var n=a(43252),o=a(48563)},43252:(e,t,a)=>{"use strict";a.d(t,{F4:()=>y,Rh:()=>m,Y6:()=>I,m7:()=>b,nz:()=>f,sH:()=>g,wA:()=>h});var n=a(67218);a(79130);var o=a(34717),i=a(70762),r=a(8010),s=a(13824),c=a(622),l=a(20592),d=a(48563),p=a(17478);let u=i.z.object({propertyId:i.z.string().min(1,{message:"Property ID is required."}),guestInfo:i.z.object({firstName:i.z.string().min(1,{message:"Guest first name is required."}),lastName:i.z.string().optional(),email:i.z.string().email({message:"Invalid guest email address."}),phone:i.z.string().optional(),address:i.z.string().optional(),city:i.z.string().optional(),state:i.z.string().optional(),country:i.z.string().optional(),zipCode:i.z.string().optional(),userId:i.z.string().optional()}).passthrough(),checkInDate:i.z.string().datetime({message:"Invalid check-in date format (ISO string expected)."}),checkOutDate:i.z.string().datetime({message:"Invalid check-out date format (ISO string expected)."}),numberOfGuests:i.z.number().int().positive({message:"Number of guests must be positive."}),pricing:i.z.object({baseRate:i.z.number().positive({message:"Base rate must be positive."}),numberOfNights:i.z.number().int().positive({message:"Number of nights must be positive."}),cleaningFee:i.z.number().nonnegative({message:"Cleaning fee cannot be negative."}),extraGuestFee:i.z.number().nonnegative({message:"Extra guest fee cannot be negative."}).optional(),numberOfExtraGuests:i.z.number().int().nonnegative({message:"Number of extra guests cannot be negative."}).optional(),accommodationTotal:i.z.number().positive({message:"Accommodation total must be positive."}),subtotal:i.z.number().positive({message:"Subtotal must be positive."}),taxes:i.z.number().nonnegative({message:"Taxes cannot be negative."}).optional(),discountAmount:i.z.number().nonnegative({message:"Discount amount cannot be negative."}).optional(),total:i.z.number().positive({message:"Total price must be positive."})}).passthrough(),appliedCouponCode:i.z.string().optional(),status:i.z.enum(["pending","confirmed","cancelled","completed"]).optional(),paymentInput:i.z.object({stripePaymentIntentId:i.z.string().min(1,{message:"Stripe Payment Intent ID is required."}),amount:i.z.number().positive({message:"Payment amount must be positive."}),status:i.z.string().min(1,{message:"Payment status is required."})}).passthrough(),notes:i.z.string().optional(),source:i.z.string().optional(),externalId:i.z.string().optional()}).refine(e=>new Date(e.checkOutDate)>new Date(e.checkInDate),{message:"Check-out date must be after check-in date.",path:["checkOutDate"]}).refine(e=>.01>Math.abs((e.pricing.subtotal??0)+(e.pricing.taxes??0)-(e.pricing.discountAmount??0)-e.pricing.total),{message:"Calculated total does not match provided total price.",path:["pricing.total"]});async function g(e){let t;let a=e?.paymentInput?.stripePaymentIntentId||"N/A",n=u.safeParse(e);if(!n.success){let e=n.error.errors.map(e=>`${e.path.join(".")}: ${e.message}`).join(", "),t=Error(`Invalid booking data: ${e}`);throw console.error(`❌ [createBooking] Validation Error for Payment Intent [${a}]:`,t.message),t}t=n.data;try{let e=(0,o.rJ)(r.db,"bookings"),n=new Date(t.checkInDate),i=new Date(t.checkOutDate),s=o.Dc.fromDate(n),c=o.Dc.fromDate(i),l={stripePaymentIntentId:t.paymentInput.stripePaymentIntentId,amount:t.paymentInput.amount,status:t.paymentInput.status,paidAt:"succeeded"===t.paymentInput.status||"paid"===t.paymentInput.status?o.Dc.now():null},{paymentInput:p,...u}=t,g={...u,checkInDate:s,checkOutDate:c,pricing:{baseRate:u.pricing.baseRate,numberOfNights:u.pricing.numberOfNights,cleaningFee:u.pricing.cleaningFee,extraGuestFee:u.pricing.extraGuestFee,numberOfExtraGuests:u.pricing.numberOfExtraGuests,accommodationTotal:u.pricing.accommodationTotal,subtotal:u.pricing.subtotal,taxes:u.pricing.taxes??0,discountAmount:u.pricing.discountAmount,total:u.pricing.total},appliedCouponCode:u.appliedCouponCode,paymentInfo:l,createdAt:(0,o.O5)(),updatedAt:(0,o.O5)(),status:u.status||"confirmed"},b=(await (0,o.gS)(e,g)).id;console.log(`✅ [createBooking] Booking document created successfully! ID: ${b} for Payment Intent [${a}]`);try{await h(t.propertyId,n,i,!1)}catch(e){console.error(`❌ [createBooking] Failed to update local availability (Client SDK) for property ${t.propertyId} after creating booking ${b}:`,e)}try{let e=await (0,d.E8)(t.propertyId);e?(e.airbnbListingId&&await (0,d.Xh)(e.airbnbListingId,!1,n,i),e.bookingComListingId&&await (0,d.DS)(e.bookingComListingId,!1,n,i)):console.warn(`[createBooking Sync] Could not retrieve property details for ${t.propertyId} to perform external sync.`)}catch(e){console.error(`❌ [createBooking Sync] Error synchronizing availability with external platforms for property ${t.propertyId} after creating booking ${b}:`,e)}return b}catch(e){throw e instanceof Error&&e.message.startsWith("Invalid booking data:")||console.error(`❌ [createBooking] Error during booking creation process for Payment Intent [${a}]:`,e),Error(e instanceof Error?e.message.startsWith("Invalid booking data:")?e.message:`Failed to create booking (Payment Intent: ${a}): ${e.message}`:`Failed to create booking (Payment Intent: ${a}): ${String(e)}`)}}async function b(e){try{let t=(0,o.H9)(r.db,"bookings",e),a=await (0,o.x7)(t);if(!a.exists())return console.warn(`[getBookingById] No booking found with ID: ${e}`),null;{let e=a.data();return{id:a.id,...e,checkInDate:e.checkInDate,checkOutDate:e.checkOutDate,createdAt:e.createdAt,updatedAt:e.updatedAt,paymentInfo:{...e.paymentInfo,paidAt:e.paymentInfo?.paidAt}}}}catch(t){throw console.error(`❌ [getBookingById] Error fetching booking with ID ${e}:`,t),Error(`Failed to fetch booking: ${t instanceof Error?t.message:String(t)}`)}}async function f(e,t){try{let a=(0,o.H9)(r.db,"bookings",e);if(await (0,o.mZ)(a,{status:t,updatedAt:(0,o.O5)()}),console.log(`✅ [updateBookingStatus] Successfully updated booking ${e} to status: ${t}`),"cancelled"===t){let t=await b(e);if(t&&t.checkInDate&&t.checkOutDate){let a=t.checkInDate.toDate(),n=t.checkOutDate.toDate();try{await h(t.propertyId,a,n,!0)}catch(t){console.error(`❌ [updateBookingStatus] Failed to update local availability (Client SDK) for cancelled booking ${e}:`,t)}try{let e=await (0,d.E8)(t.propertyId);e?(e.airbnbListingId&&await (0,d.Xh)(e.airbnbListingId,!0,a,n),e.bookingComListingId&&await (0,d.DS)(e.bookingComListingId,!0,a,n)):console.warn(`[Sync] Could not find property details for ${t.propertyId} to sync cancellation.`)}catch(t){console.error(`❌ [Sync] Error syncing availability after cancellation for booking ${e}:`,t)}}else console.warn(`[updateBookingStatus] Could not find booking ${e} or its dates to update availability after cancellation.`)}}catch(t){throw console.error(`❌ [updateBookingStatus] Error updating status for booking ${e} (Client SDK):`,t),Error(`Failed to update booking status: ${t instanceof Error?t.message:String(t)}`)}}async function m(e){let t=[];try{let a=(0,o.rJ)(r.db,"bookings"),n=(0,o.P)(a,(0,o._M)("propertyId","==",e));return(await (0,o.GG)(n)).forEach(e=>{let a=e.data();t.push({id:e.id,...a,checkInDate:a.checkInDate,checkOutDate:a.checkOutDate,createdAt:a.createdAt,updatedAt:a.updatedAt,paymentInfo:{...a.paymentInfo,paidAt:a.paymentInfo?.paidAt}})}),t}catch(t){throw console.error(`❌ [getBookingsForProperty] Error fetching bookings for property ${e}:`,t),Error(`Failed to fetch bookings for property: ${t instanceof Error?t.message:String(t)}`)}}async function y(e){let t=[];try{let a=(0,o.rJ)(r.db,"bookings"),n=(0,o.P)(a,(0,o._M)("guestInfo.userId","==",e));return(await (0,o.GG)(n)).forEach(e=>{let a=e.data();t.push({id:e.id,...a,checkInDate:a.checkInDate,checkOutDate:a.checkOutDate,createdAt:a.createdAt,updatedAt:a.updatedAt,paymentInfo:{...a.paymentInfo,paidAt:a.paymentInfo?.paidAt}})}),t}catch(t){throw console.error(`❌ [getBookingsForUser] Error fetching bookings for user ${e}:`,t),Error(`Failed to fetch bookings for user: ${t instanceof Error?t.message:String(t)}`)}}async function h(e,t,a,n){if(!r.db)throw console.error("❌ [updatePropertyAvailability - CLIENT SDK] Firestore Client SDK (db) is not initialized. Cannot update availability."),Error("Firestore Client SDK is not initialized.");if(a<=t){console.warn(`[updatePropertyAvailability] Check-out date (${(0,s.GP)(a,"yyyy-MM-dd")}) must be after check-in date (${(0,s.GP)(t,"yyyy-MM-dd")}). No update performed.`);return}let i=(0,c.k)({start:t,end:(0,l.e)(a,1)});if(0===i.length)return;let d={};i.forEach(e=>{let t=(0,s.GP)(e,"yyyy-MM"),a=e.getDate();d[t]||(d[t]={}),d[t][a]=n});let p=(0,o.wP)(r.db),u=(0,o.rJ)(r.db,"availability");try{let t=Object.keys(d);if(0===t.length)return;let a=t.map(t=>`${e}_${t}`),n=[];for(let e=0;e<a.length;e+=30)n.push(a.slice(e,e+30));let i=new Map;await Promise.all(n.map(async(e,t)=>{if(0===e.length)return;let a=(0,o.P)(u,(0,o._M)((0,o.Fs)(),"in",e));(await (0,o.GG)(a)).forEach(e=>{e.exists()&&i.set(e.id,{id:e.id,...e.data()})})})),t.forEach(t=>{let a=`${e}_${t}`,n=(0,o.H9)(u,a),r=d[t],s={};for(let e in r)s[`available.${String(e)}`]=r[e];if(s.updatedAt=(0,o.O5)(),i.get(a))p.update(n,s);else{let[a,i]=t.split("-").map(Number),s=new Date(a,i,0).getDate(),c={};for(let e=1;e<=s;e++)c[e]=void 0===r[e]||r[e];let l={propertyId:e,month:t,available:c,updatedAt:(0,o.O5)()};p.set(n,l,{merge:!0})}}),await p.commit(),console.log(`✅ [updatePropertyAvailability - CLIENT SDK] Successfully committed batch updates for local availability for property ${e}.`)}catch(t){throw console.error(`❌ Error during Client SDK batch update/creation for property availability ${e}:`,t),Error(`Failed to update local property availability using Client SDK: ${t instanceof Error?t.message:String(t)}`)}}async function I(e,t=12){let a=[];if(!r.db)return console.error("❌ [getUnavailableDatesForProperty] Firestore Client SDK (db) is not initialized. Cannot fetch availability."),[];let n=(0,o.rJ)(r.db,"availability"),i=new Date,c=new Date(Date.UTC(i.getUTCFullYear(),i.getUTCMonth(),1));try{let r=[];for(let a=0;a<t;a++){let t=new Date(Date.UTC(c.getUTCFullYear(),c.getUTCMonth()+a,1)),n=(0,s.GP)(t,"yyyy-MM");r.push(`${e}_${n}`)}let l=[];for(let e=0;e<r.length;e+=30)l.push(r.slice(e,e+30));if(0===r.length)return[];return(await Promise.all(l.map(async(e,t)=>{let a=(0,o.P)(n,(0,o._M)((0,o.Fs)(),"in",e));return(0,o.GG)(a)}))).forEach((e,t)=>{e.forEach(e=>{let t=e.data(),n=e.id,o=n.split("_")[1],r=t.month||o;if(!r||!/^\d{4}-\d{2}$/.test(r)){console.warn(`[getUnavailableDatesForProperty] Could not determine valid month string for doc ${n}. Skipping.`);return}if(t.available&&"object"==typeof t.available){let[e,n]=r.split("-").map(e=>parseInt(e,10)),o=n-1;for(let n in t.available){let r=parseInt(n,10);if(!isNaN(r)&&!1===t.available[r])try{if(e>0&&o>=0&&o<12&&r>0&&r<=31){let t=new Date(Date.UTC(e,o,r));if(t.getUTCFullYear()===e&&t.getUTCMonth()===o&&t.getUTCDate()===r){let e=new Date(Date.UTC(i.getUTCFullYear(),i.getUTCMonth(),i.getUTCDate()));t>=e&&a.push(t)}}}catch(e){}}}})}),a.sort((e,t)=>e.getTime()-t.getTime()),a}catch(t){return console.error(`❌ Error fetching unavailable dates for property ${e}:`,t),[]}}(0,p.D)([g,b,f,m,y,h,I]),(0,n.A)(g,"40871143d9e5eb119e2d368471e521a52cc7d2696e",null),(0,n.A)(b,"40c72ba62947d37c07a62f3e271a5767237e39eaea",null),(0,n.A)(f,"606819dbf83ad474ae167838bed80207da16a704bf",null),(0,n.A)(m,"401d20e1638c4c996dd7a3daf3333614f89b89242a",null),(0,n.A)(y,"40f23d64c4b8844f72c28aa963c436d2d8853e8833",null),(0,n.A)(h,"78064f30f4b57975911e6d7e67ff6b332ff90e420b",null),(0,n.A)(I,"6065cd9e648ff6ec96b449427ed10a7b449e12e86b",null)},48563:(e,t,a)=>{"use strict";a.d(t,{DS:()=>d,E8:()=>r,Xh:()=>l,lu:()=>c,pb:()=>s});var n=a(67218);a(79130);var o=a(34717),i=a(8010);async function r(e){let t=(0,o.H9)(i.db,"properties",e);try{let a=await (0,o.x7)(t);if(a.exists())return{id:a.id,...a.data()};return console.warn(`[getPropertyForSync] Property document not found in Firestore: properties/${e}`),null}catch(t){return console.error(`❌ [getPropertyForSync] Error fetching property ${e}:`,t),null}}async function s(e){return console.log(`[Sync Placeholder] Fetching Airbnb listing details for ID: ${e}`),await new Promise(e=>setTimeout(e,100)),{listingId:e,isAvailable:!0,pricePerNight:150}}async function c(e){return console.log(`[Sync Placeholder] Fetching Booking.com listing details for ID: ${e}`),await new Promise(e=>setTimeout(e,100)),{listingId:e,isAvailable:!0,pricePerNight:160}}async function l(e,t,a,n){let o=a&&n?` from ${a.toISOString().split("T")[0]} to ${n.toISOString().split("T")[0]}`:"";console.log(`[Sync Placeholder] Updating Airbnb listing ${e} availability to ${t}${o}.`),await new Promise(e=>setTimeout(e,150))}async function d(e,t,a,n){let o=a&&n?` from ${a.toISOString().split("T")[0]} to ${n.toISOString().split("T")[0]}`:"";console.log(`[Sync Placeholder] Updating Booking.com listing ${e} availability to ${t}${o}.`),await new Promise(e=>setTimeout(e,150))}(0,a(17478).D)([r,s,c,l,d]),(0,n.A)(r,"4096a6d0e9ec81bee3869cbb98547ab1fe2434baeb",null),(0,n.A)(s,"403dfa05887180795253053b5ddc24cd97a1c22906",null),(0,n.A)(c,"408df2983918ea43b143e90c8540295eb73d5a7dd8",null),(0,n.A)(l,"78d4fef20c3c2302ee6890a1c6bb6fd94aa05c61a4",null),(0,n.A)(d,"78a512a53a154ec00ffc1df8a8e917ddf776cc0d8d",null)},78335:()=>{},96487:()=>{}};