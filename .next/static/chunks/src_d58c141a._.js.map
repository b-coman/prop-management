{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["// src/lib/firebase.ts\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getFirestore } from 'firebase/firestore';\nimport { getAuth } from \"firebase/auth\"; // Added for Firebase Auth\n\n// Load environment variables from .env.local at the project root\n// This is automatically handled by Next.js in the app runtime.\n// Scripts like load-properties.ts need to load .env.local explicitly.\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase Client SDK\nlet app;\nif (getApps().length === 0) {\n  if (!firebaseConfig.apiKey || !firebaseConfig.projectId) {\n    console.error(\n      \"❌ Client Firebase Config Missing: NEXT_PUBLIC_FIREBASE_API_KEY or NEXT_PUBLIC_FIREBASE_PROJECT_ID is missing. Client SDK cannot initialize.\"\n    );\n    // Potentially throw an error or handle this case as critical\n  } else {\n    try {\n      app = initializeApp(firebaseConfig);\n      // console.log(\"✅ Firebase Client SDK initialized successfully.\");\n    } catch (initError) {\n      console.error(\"❌ Firebase Client SDK initialization failed:\", initError);\n    }\n  }\n} else {\n  app = getApp();\n  // console.log(\"ℹ️ Firebase Client SDK app already initialized.\");\n}\n\nlet db;\nlet auth; // Declare auth\n\nif (app) {\n  try {\n    db = getFirestore(app);\n    auth = getAuth(app); // Initialize auth\n    // console.log(\"✅ Firestore and Auth Client SDKs initialized successfully.\");\n  } catch (sdkError) {\n    console.error(\"❌ Firestore or Auth Client SDK initialization failed:\", sdkError);\n  }\n} else {\n  console.error(\"❌ Cannot initialize Firestore/Auth Client SDKs because Firebase app is not available.\");\n}\n\nexport { app, db, auth }; // Export auth\n"],"names":[],"mappings":"AAAA,sBAAsB;;;;;;AAUZ;AATV;AAAA;AACA;AAAA;AACA,0UAAyC,0BAA0B;AAAnE;;;;AAEA,iEAAiE;AACjE,+DAA+D;AAC/D,sEAAsE;AAEtE,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;AACP;AAEA,iCAAiC;AACjC,IAAI;AACJ,IAAI,CAAA,GAAA,uLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,KAAK,GAAG;IAC1B,IAAI,CAAC,eAAe,MAAM,IAAI,CAAC,eAAe,SAAS,EAAE;QACvD,QAAQ,KAAK,CACX;IAEF,6DAA6D;IAC/D,OAAO;QACL,IAAI;YACF,MAAM,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE;QACpB,kEAAkE;QACpE,EAAE,OAAO,WAAW;YAClB,QAAQ,KAAK,CAAC,gDAAgD;QAChE;IACF;AACF,OAAO;IACL,MAAM,CAAA,GAAA,uLAAA,CAAA,SAAM,AAAD;AACX,kEAAkE;AACpE;AAEA,IAAI;AACJ,IAAI,MAAM,eAAe;AAEzB,IAAI,KAAK;IACP,IAAI;QACF,KAAK,CAAA,GAAA,sKAAA,CAAA,eAAY,AAAD,EAAE;QAClB,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE,MAAM,kBAAkB;IACvC,6EAA6E;IAC/E,EAAE,OAAO,UAAU;QACjB,QAAQ,KAAK,CAAC,yDAAyD;IACzE;AACF,OAAO;IACL,QAAQ,KAAK,CAAC;AAChB;;;;;CAE0B,cAAc","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/contexts/AuthContext.tsx"],"sourcesContent":["// src/contexts/AuthContext.tsx\n'use client';\n\nimport type { ReactNode, Dispatch, SetStateAction } from 'react';\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport {\n  onAuthStateChanged,\n  signInWithRedirect, // Changed from signInWithPopup\n  getRedirectResult, // Added for signInWithRedirect\n  GoogleAuthProvider,\n  signOut as firebaseSignOut,\n  type User as FirebaseUser,\n  AuthErrorCodes,\n} from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\nimport { useRouter } from 'next/navigation';\nimport { Loader2 } from 'lucide-react';\n\ninterface AuthContextType {\n  user: FirebaseUser | null;\n  loading: boolean;\n  signInWithGoogle: () => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [user, setUser] = useState<FirebaseUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!auth) {\n      console.error(\"[AuthProvider] Firebase Auth is not initialized.\");\n      setLoading(false);\n      return;\n    }\n    // This handles initial auth state and subsequent changes\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n      setUser(currentUser);\n      setLoading(false);\n      // console.log(\"[AuthProvider] onAuthStateChanged. User:\", currentUser ? currentUser.uid : null, \"Loading:\", false);\n    });\n    return () => unsubscribe();\n  }, []);\n\n\n  // This effect handles the result of a redirect-based sign-in\n  useEffect(() => {\n    if (!auth) return; // Wait for auth to be initialized\n\n    const processRedirectResult = async () => {\n      // It's possible onAuthStateChanged already set loading to false.\n      // If we are in a redirect flow, we might want to set loading to true again.\n      // However, getRedirectResult itself doesn't always mean loading should be true,\n      // as it also runs on normal page loads to check if there's a PENDING redirect.\n      // Let's rely on the onAuthStateChanged to manage the primary loading state.\n      try {\n        const result = await getRedirectResult(auth);\n        if (result) {\n          // User successfully signed in via redirect.\n          // onAuthStateChanged will typically handle setting the user state.\n          // This log confirms the redirect flow completed.\n          console.log(\"[AuthProvider] Google sign-in via redirect successful. User:\", result.user.uid);\n          // setUser(result.user); // Usually redundant as onAuthStateChanged will fire\n          // setLoading(false); // onAuthStateChanged handles this\n        } else {\n          // No redirect result pending. This is normal on initial page loads.\n          // console.log(\"[AuthProvider] No pending redirect result.\");\n        }\n      } catch (error: any) {\n        if (error.code === AuthErrorCodes.UNAUTHORIZED_DOMAIN) {\n          console.error(\n            '❌ Error processing Google Sign-In redirect: Unauthorized domain. ' +\n            'Please ensure your current domain is added to the list of authorized domains ' +\n            'in your Firebase project settings (Authentication -> Sign-in method -> Google -> Authorized redirect URIs). ' +\n            `Current domain is likely: ${window.location.hostname}`\n          );\n        } else if (error.code === 'auth/no-auth-event' || error.code === 'auth/redirect-cancelled') {\n          // These errors are expected if there's no pending redirect or user cancels.\n          // console.log(`[AuthProvider] Redirect status: ${error.message}`);\n        }\n         else {\n          console.error('❌ Error processing Google Sign-In redirect result:', error);\n        }\n        // setLoading(false); // onAuthStateChanged should handle this\n      }\n    };\n\n    processRedirectResult();\n  }, [auth]); // Dependency: run when auth object is available.\n\n  const signInWithGoogle = async () => {\n    if (!auth) {\n        console.error(\"[AuthProvider] Firebase Auth is not initialized for signInWithGoogle.\");\n        return;\n    }\n    setLoading(true); // Indicate that an auth process is starting\n    try {\n      const provider = new GoogleAuthProvider();\n      // signInWithRedirect doesn't return a promise that resolves with user credentials here.\n      // It navigates the user. The result is handled by getRedirectResult on page load.\n      await signInWithRedirect(auth, provider);\n      // Page will redirect, so code after this might not execute immediately.\n    } catch (error: any) {\n      // This catch block might not be hit for typical redirect errors,\n      // as the page navigates away. Errors are more likely caught by getRedirectResult.\n      if (error.code === AuthErrorCodes.UNAUTHORIZED_DOMAIN) {\n        console.error( /* ... existing error message ... */ );\n      } else {\n        console.error('❌ Error initiating Google sign-in with redirect:', error);\n      }\n      setLoading(false); // Ensure loading is reset if redirect initiation fails\n    }\n  };\n\n  const logout = async () => {\n    if (!auth) {\n        console.error(\"[AuthProvider] Firebase Auth is not initialized for logout.\");\n        return;\n    }\n    setLoading(true);\n    try {\n      await firebaseSignOut(auth);\n      setUser(null); // Explicitly set user to null\n      router.push('/login');\n    } catch (error) {\n      console.error('❌ Error signing out:', error);\n    } finally {\n        setLoading(false);\n    }\n  };\n  \n  if (loading && !auth) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center\">\n        <p className=\"text-red-500\">Error: Firebase Authentication failed to initialize.</p>\n      </div>\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, loading, signInWithGoogle, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"names":[],"mappings":"AAAA,+BAA+B;;;;;;AAI/B;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;;;AAdA;;;;;AAwBA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,eAAe,CAAC,EAAE,QAAQ,EAA2B;;IAChE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAuB;IACtD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,IAAI,CAAC,yHAAA,CAAA,OAAI,EAAE;gBACT,QAAQ,KAAK,CAAC;gBACd,WAAW;gBACX;YACF;YACA,yDAAyD;YACzD,MAAM,cAAc,CAAA,GAAA,oPAAA,CAAA,qBAAkB,AAAD,EAAE,yHAAA,CAAA,OAAI;sDAAE,CAAC;oBAC5C,QAAQ;oBACR,WAAW;gBACX,oHAAoH;gBACtH;;YACA;0CAAO,IAAM;;QACf;iCAAG,EAAE;IAGL,6DAA6D;IAC7D,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,IAAI,CAAC,yHAAA,CAAA,OAAI,EAAE,QAAQ,kCAAkC;YAErD,MAAM;gEAAwB;oBAC5B,iEAAiE;oBACjE,4EAA4E;oBAC5E,gFAAgF;oBAChF,+EAA+E;oBAC/E,4EAA4E;oBAC5E,IAAI;wBACF,MAAM,SAAS,MAAM,CAAA,GAAA,mPAAA,CAAA,oBAAiB,AAAD,EAAE,yHAAA,CAAA,OAAI;wBAC3C,IAAI,QAAQ;4BACV,4CAA4C;4BAC5C,mEAAmE;4BACnE,iDAAiD;4BACjD,QAAQ,GAAG,CAAC,gEAAgE,OAAO,IAAI,CAAC,GAAG;wBAC3F,6EAA6E;wBAC7E,wDAAwD;wBAC1D,OAAO;wBACL,oEAAoE;wBACpE,6DAA6D;wBAC/D;oBACF,EAAE,OAAO,OAAY;wBACnB,IAAI,MAAM,IAAI,KAAK,gPAAA,CAAA,iBAAc,CAAC,mBAAmB,EAAE;4BACrD,QAAQ,KAAK,CACX,sEACA,kFACA,iHACA,CAAC,0BAA0B,EAAE,OAAO,QAAQ,CAAC,QAAQ,EAAE;wBAE3D,OAAO,IAAI,MAAM,IAAI,KAAK,wBAAwB,MAAM,IAAI,KAAK,2BAA2B;wBAC1F,4EAA4E;wBAC5E,mEAAmE;wBACrE,OACM;4BACJ,QAAQ,KAAK,CAAC,sDAAsD;wBACtE;oBACA,8DAA8D;oBAChE;gBACF;;YAEA;QACF;iCAAG;QAAC,yHAAA,CAAA,OAAI;KAAC,GAAG,iDAAiD;IAE7D,MAAM,mBAAmB;QACvB,IAAI,CAAC,yHAAA,CAAA,OAAI,EAAE;YACP,QAAQ,KAAK,CAAC;YACd;QACJ;QACA,WAAW,OAAO,4CAA4C;QAC9D,IAAI;YACF,MAAM,WAAW,IAAI,oPAAA,CAAA,qBAAkB;YACvC,wFAAwF;YACxF,kFAAkF;YAClF,MAAM,CAAA,GAAA,oPAAA,CAAA,qBAAkB,AAAD,EAAE,yHAAA,CAAA,OAAI,EAAE;QAC/B,wEAAwE;QAC1E,EAAE,OAAO,OAAY;YACnB,iEAAiE;YACjE,kFAAkF;YAClF,IAAI,MAAM,IAAI,KAAK,gPAAA,CAAA,iBAAc,CAAC,mBAAmB,EAAE;gBACrD,QAAQ,KAAK;YACf,OAAO;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YACpE;YACA,WAAW,QAAQ,uDAAuD;QAC5E;IACF;IAEA,MAAM,SAAS;QACb,IAAI,CAAC,yHAAA,CAAA,OAAI,EAAE;YACP,QAAQ,KAAK,CAAC;YACd;QACJ;QACA,WAAW;QACX,IAAI;YACF,MAAM,CAAA,GAAA,yOAAA,CAAA,UAAe,AAAD,EAAE,yHAAA,CAAA,OAAI;YAC1B,QAAQ,OAAO,8BAA8B;YAC7C,OAAO,IAAI,CAAC;QACd,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;QACxC,SAAU;YACN,WAAW;QACf;IACF;IAEA,IAAI,WAAW,CAAC,yHAAA,CAAA,OAAI,EAAE;QACpB,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAE,WAAU;0BAAe;;;;;;;;;;;IAGlC;IAEA,qBACE,6LAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAS;YAAkB;QAAO;kBACpE;;;;;;AAGP;GAxHa;;QAGI,qIAAA,CAAA,YAAS;;;KAHb;AA0HN,MAAM,UAAU;;IACrB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANa","debugId":null}}]
}