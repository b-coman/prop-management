// src/services/bookingService.ts
'use server'; // Mark this module for server-side execution

import { collection, addDoc, serverTimestamp, Timestamp } from 'firebase/firestore';
import { db } from '@/lib/firebase'; // Import your initialized Firestore instance
import type { Booking } from '@/types';

// Define the structure for creating a booking, omitting fields generated by Firestore or derived later
// Omit 'id', 'createdAt', 'updatedAt' as they are handled by Firestore or service logic
type CreateBookingData = Omit<Booking, 'id' | 'createdAt' | 'updatedAt' | 'checkInDate' | 'checkOutDate' | 'paymentInfo'> & {
  checkInDate: string; // Expecting ISO string from Stripe metadata
  checkOutDate: string; // Expecting ISO string from Stripe metadata
  paymentInfo: Omit<Booking['paymentInfo'], 'paidAt'> & { // paidAt will be set here
      paidAt?: string | null; // Allow string for timestamp from Stripe if needed
  }
};


/**
 * Creates a new booking document in Firestore.
 *
 * @param bookingData - The data for the new booking, conforming to CreateBookingData.
 * @returns The ID of the newly created booking document.
 * @throws Throws an error if the booking cannot be created.
 */
export async function createBooking(bookingData: CreateBookingData): Promise<string> {
  try {
    const bookingsCollection = collection(db, 'bookings');

    // Convert date strings to Firestore Timestamps
    const checkInTimestamp = Timestamp.fromDate(new Date(bookingData.checkInDate));
    const checkOutTimestamp = Timestamp.fromDate(new Date(bookingData.checkOutDate));

    // Prepare the document data, including server timestamps
    const docData = {
      ...bookingData,
      checkInDate: checkInTimestamp,
      checkOutDate: checkOutTimestamp,
      paymentInfo: {
          ...bookingData.paymentInfo,
          // Set paidAt to now if payment status is successful, otherwise null
          paidAt: bookingData.paymentInfo.status === 'succeeded' ? serverTimestamp() : null,
      },
      createdAt: serverTimestamp(), // Firestore generates timestamp on the server
      updatedAt: serverTimestamp(), // Firestore generates timestamp on the server
    };

    // Add the document to the 'bookings' collection
    const docRef = await addDoc(bookingsCollection, docData);

    console.log('Booking created successfully with ID:', docRef.id);
    return docRef.id;

  } catch (error) {
    console.error('Error creating booking in Firestore:', error);
    // Re-throw the error to be handled by the caller (e.g., the webhook handler)
    throw new Error(`Failed to create booking: ${error instanceof Error ? error.message : String(error)}`);
  }
}

// TODO: Add functions for:
// - getBookingById(bookingId: string): Promise<Booking | null>
// - updateBookingStatus(bookingId: string, status: Booking['status']): Promise<void>
// - getBookingsForProperty(propertyId: string): Promise<Booking[]>
// - getBookingsForUser(userId: string): Promise<Booking[]>
