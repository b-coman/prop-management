
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(propertyId) {
      // Check if the user is signed in and if the property document exists and has an ownerId matching the user's UID
      return isSignedIn() &&
             exists(/databases/$(database)/documents/properties/$(propertyId)) &&
             get(/databases/$(database)/documents/properties/$(propertyId)).data.ownerId == request.auth.uid;
    }

    function isAdmin() {
      // Check if the user is signed in and if their user document exists and has the role 'admin'
      return isSignedIn() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

 // --- Properties Collection ---
    match /properties/{propertySlug} {
      allow read: if true; // Publicly readable
      allow create: if true; // TEMPORARY: Allow any creation for development
      allow update: if true; // TEMPORARY: Allow any updates for development
      allow delete: if true; // TEMPORARY: Allow any deletion for development
      
      // Original rules (commented out for development)
      // allow create: if isSignedIn(); // Allow authenticated users to create
      // allow update: if isOwner(propertySlug) || isAdmin();
      // allow delete: if isOwner(propertySlug) || isAdmin();

      // Custom domain validation (simplified example, actual validation is complex)
      // Ensure domain is unique before allowing update if useCustomDomain is true
      // This rule is complex and might need a Cloud Function for robust uniqueness checks.
      // For simplicity, we'll allow updates by owner/admin for now, but real-world needs more.
      // allow update: if (isOwner(propertySlug) || isAdmin()) &&
      //                   (request.resource.data.useCustomDomain == false ||
      //                    (request.resource.data.useCustomDomain == true &&
      //                     /* TODO: Add domain uniqueness check logic here if possible, often needs a backend function */
      //                     true
      //                   ));
    }
    
    // PropertyOverrides collection
    match /propertyOverrides/{propertyId} {
      allow read: if true;
      allow write: if isOwner(propertyId) || isAdmin();
    }
    
    // WebsiteTemplates collection
		match /websiteTemplates/{templateId} {
		 	allow read: if true; // Public read access
  		allow write: if isAdmin(); // Only admins can create/update/delete templates
		}


    // Availability collection
      match /availability/{documentId} {
        allow read: if true; // Public read access

        // Fix for new documents using request.resource instead of resource
        allow create: if true || (isSignedIn() &&
            (isOwner(request.resource.data.propertyId) || isAdmin()));

        // For existing documents
        allow update: if true || (isSignedIn() &&
            (isOwner(resource.data.propertyId) || isAdmin()));
      }


    // --- Bookings Collection ---
      match /bookings/{bookingId} {
        // Allow anyone to create a pending booking
        allow create: if true;

        // Allow public read access for booking confirmation page
        allow read: if true;

        // Allow updates for payment processing (look for specific fields being updated)
        allow update: if request.resource.data.paymentInfo != null ||
                      (isSignedIn() &&
                       (resource.data.guestInfo.userId == request.auth.uid || // Guest who made booking
                        isOwner(resource.data.propertyId) ||                 // Property owner
                        isAdmin()));                                        // Admin
      }


    // Users collection
    match /users/{userId} {
      // Allow read/write only for the user themselves or an admin
      allow read, write: if request.auth.uid == userId || isAdmin();
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Public read access
      // Allow create only for signed-in users
      allow create: if isSignedIn();
      // Allow update/delete only for admins
      allow update, delete: if isAdmin();
    }

    // Settings collection
    match /settings/{document} {
      allow read: if true; // Public read access
      // Allow write only for admins
      allow write: if isAdmin();
    }

    // SyncCalendars collection
    match /syncCalendars/{documentId} {
      // Allow read/write only for the property owner or an admin
      allow read, write: if isSignedIn() &&
                           (isOwner(resource.data.propertyId) || isAdmin());
    }

    // Coupons collection
    match /coupons/{couponId} {
      // Allow read access for everyone (needed by booking form validation)
      // Consider `if isSignedIn();` if coupons should only be visible/usable by logged-in users.
      allow read: if true;
      // Allow create/update/delete only for admins
      allow write: if isAdmin();
    }
    
    // App Config (e.g., currency rates)
    match /appConfig/{configDocId} {
        allow read: if true; // Allow public read for currency rates, etc.
        allow write: if isAdmin(); // Only admins can update configuration
    }
    
    // --- Inquiries Collection ---
    match /inquiries/{inquiryId} {
      	allow create: if true; // Allow anyone to create an inquiry
      	allow read, update: if isSignedIn() &&
                           (resource.data.guestInfo.email == request.auth.token.email || // User who made inquiry (if email matches)
                            isOwner(resource.data.propertySlug) ||           // Property owner
                            isAdmin());                                     // Admin
    }
    
    
    // --- NEW PRICING SYSTEM COLLECTIONS ---

    // --- Seasonal Pricing Collection ---
    // Document ID format typically: {propertyId}_{seasonName}_{year}
    match /seasonalPricing/{seasonId} {
      allow read: if true; // Public read for price calculations
      allow write: if isSignedIn() && 
                   (isOwner(resource.data.propertyId) || isAdmin());
    }

     // --- Date Overrides Collection ---
    // Document ID format: {propertyId}_{YYYY-MM-DD}
    match /dateOverrides/{overrideId} {
      allow read: if true; // Public read for price calculations

      // TEMPORARY - Allow all writes for development
      // In production, restore the commented-out rule below
      allow write: if true;

      // Original rule - uncomment for production
      // allow write: if isSignedIn() &&
      //             (isOwner(extractPropertyId(overrideId)) || isAdmin());
    }

    // --- Minimum Stay Rules Collection ---
    match /minimumStayRules/{ruleId} {
      allow read: if true; // Public read for booking checks
      allow write: if isSignedIn() && 
                   (isOwner(resource.data.propertyId) || isAdmin());
    }

    // --- Holidays Collection ---
    match /holidays/{holidayId} {
      allow read: if true; // Public read for context
      allow write: if isAdmin(); // Only admins can define holidays
    }

    // --- Pricing Templates Collection ---
    match /pricingTemplates/{templateId} {
      allow read: if true; // Public read for templates
      allow write: if isAdmin(); // Only admins can manage templates
    }

     // --- Price Calendars Collection ---
    // Document ID format: {propertyId}_{YYYY-MM}
    match /priceCalendars/{calendarId} {
      allow read: if true; // Public read for price lookups
      // Allow all writes for now to fix the immediate issue
      // In production, this should be locked down more tightly
      allow write: if true;
      // Original rules for reference:
      // Limited write permissions:
      // - System processes should handle calendar generation
      // - Admin should be able to fix issues
      // - Property owners shouldn't directly modify calculated prices
      // allow write: if isSignedIn();
    }
    
  }
}
