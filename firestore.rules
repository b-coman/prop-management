rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(propertySlug) {
      // Assumes propertySlug is the document ID in 'properties' collection
      return isSignedIn() && get(/databases/$(database)/documents/properties/$(propertySlug)).data.ownerId == request.auth.uid;
    }

    function isAdmin() {
      // Assumes there's a 'users' collection where admin role is defined
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Properties Collection ---
    match /properties/{propertySlug} {
      allow read: if true; // Publicly readable
      allow create: if isSignedIn(); // Allow authenticated users to create (further checks might be needed, e.g., admin or specific role)
      allow update: if isOwner(propertySlug) || isAdmin();
      allow delete: if isOwner(propertySlug) || isAdmin();

      // Custom domain validation (simplified example, actual validation is complex)
      // Ensure domain is unique before allowing update if useCustomDomain is true
      // This rule is complex and might need a Cloud Function for robust uniqueness checks.
      // For simplicity, we'll allow updates by owner/admin for now, but real-world needs more.
      // allow update: if (isOwner(propertySlug) || isAdmin()) &&
      //                   (request.resource.data.useCustomDomain == false ||
      //                    (request.resource.data.useCustomDomain == true &&
      //                     /* TODO: Add domain uniqueness check logic here if possible, often needs a backend function */
      //                     true
      //                   ));
    }

    // --- Property Overrides Collection ---
    match /propertyOverrides/{propertySlug} {
      allow read: if true; // Publicly readable
      allow write: if isOwner(propertySlug) || isAdmin(); // Only owner or admin can write overrides
    }

    // --- Website Templates Collection ---
    match /websiteTemplates/{templateId} {
      allow read: if true; // Templates are public
      allow write: if isAdmin(); // Only admins can modify templates
    }

    // --- Availability Collection ---
    // Document ID format: {propertySlug}_{YYYY-MM}
    match /availability/{availabilityId} {
      allow read: if true; // Publicly readable for booking checks
      // Writes to availability are complex:
      // - Client SDK needs to write when a booking is made (potentially after payment confirmation)
      // - Admin/Owner might need to manually adjust
      // - Cron jobs might update it
      // For now, allow writes if authenticated, but this needs refinement for production.
      // Consider using callable functions for updating availability to enforce business logic.
      allow write: if isSignedIn();
      // A more secure rule for writes, ensuring it relates to a property the user owns or is admin for:
      // allow write: if isOwner(availabilityId.split('_')[0]) || isAdmin();
      // However, client booking flow also needs to write here.
      // This might indicate the client should call a server action/function to update availability.
    }

    // --- Bookings Collection ---
    match /bookings/{bookingId} {
      // Allow anyone to create a pending booking
      allow create: if true;

      // Allow public read access for booking confirmation page
      // This is a simpler approach for MVP - in production,
      // you might want to implement more secure access controls
      // using custom claims or session tokens
      allow read: if true;

      // Allow updates only if authenticated with proper permissions
      allow update: if isSignedIn() &&
                    (resource.data.guestInfo.userId == request.auth.uid || // Guest who made booking
                     isOwner(resource.data.propertyId) ||                 // Property owner
                     isAdmin());                                         // Admin
    }

    // --- Inquiries Collection ---
    match /inquiries/{inquiryId} {
      allow create: if true; // Allow anyone to create an inquiry
      allow read, update: if isSignedIn() &&
                           (resource.data.guestInfo.email == request.auth.token.email || // User who made inquiry (if email matches)
                            isOwner(resource.data.propertySlug) ||           // Property owner
                            isAdmin());                                     // Admin
    }

    // --- Coupons Collection ---
    match /coupons/{couponId} {
      allow read: if true; // Coupons can be read by client to validate
      allow write: if isAdmin(); // Only admins can create/update/delete coupons
    }

    // --- Users Collection ---
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isAdmin(); // User can read/write own data, admin can too
    }

    // --- Reviews Collection (Placeholder rules) ---
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isSignedIn(); // Only signed-in users can create reviews
      allow update, delete: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid); // Admin or review author
    }

    // --- SyncCalendars Collection (Placeholder rules) ---
    match /syncCalendars/{syncId} {
      allow read, write: if isSignedIn() && (isOwner(resource.data.propertyId) || isAdmin());
    }

    // --- AvailabilityAlerts Collection (Placeholder rules) ---
    match /availabilityAlerts/{alertId} {
      allow create: if true; // Anyone can request an alert
      allow read, delete: if isSignedIn() && (isOwner(resource.data.propertyId) || isAdmin() || resource.data.contactMethod == request.auth.token.email);
    }

    // --- AppConfig Collection (e.g., for currencyRates) ---
    match /appConfig/{configId} {
      allow read: if true; // Config is public
      allow write: if isAdmin(); // Only admins can change config
    }
  }
}
