
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(propertyId) {
      // Check if the user is signed in and if the property document exists and has an ownerId matching the user's UID
      return isSignedIn() &&
             exists(/databases/$(database)/documents/properties/$(propertyId)) &&
             get(/databases/$(database)/documents/properties/$(propertyId)).data.ownerId == request.auth.uid;
    }

    function isAdmin() {
      // Check if the user is signed in and if their user document exists and has the role 'admin'
      return isSignedIn() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Properties collection
    match /properties/{propertyId} {
      allow read: if true; // Public read access
      // Allow create only if signed in and the ownerId matches the user creating it
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      // Allow update/delete only for the owner or an admin
      allow update, delete: if isOwner(propertyId) || isAdmin();
    }

    // Availability collection
    match /availability/{documentId} {
      allow read: if true; // Public read access
      // Allow write only for the property owner or an admin
      // Extracts propertyId from documentId (e.g., "prop1_2025-05")
      allow write: if isSignedIn() && (isOwner(documentId.split('_')[0]) || isAdmin());
    }

    // Bookings collection
    match /bookings/{bookingId} {
      // Allow anyone to create a booking (handle validation server-side)
      allow create: if true;
      // Allow read/update only for the guest who made the booking, the property owner, or an admin
      allow read, update: if isSignedIn() &&
                             (request.auth.uid == resource.data.guestInfo.userId ||
                              isOwner(resource.data.propertyId) ||
                              isAdmin());
      // Allow delete only for admins (or adjust based on requirements)
      allow delete: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      // Allow read/write only for the user themselves or an admin
      allow read, write: if request.auth.uid == userId || isAdmin();
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Public read access
      // Allow create only for signed-in users
      allow create: if isSignedIn();
      // Allow update/delete only for admins
      allow update, delete: if isAdmin();
    }

    // Settings collection
    match /settings/{document} {
      allow read: if true; // Public read access
      // Allow write only for admins
      allow write: if isAdmin();
    }

    // SyncCalendars collection
    match /syncCalendars/{documentId} {
      // Allow read/write only for the property owner or an admin
      allow read, write: if isSignedIn() &&
                           (isOwner(resource.data.propertyId) || isAdmin());
    }

    // Coupons collection
    match /coupons/{couponId} {
      // Allow read access for everyone (needed by booking form validation)
      // Consider `if isSignedIn();` if coupons should only be visible/usable by logged-in users.
      allow read: if true;
      // Allow create/update/delete only for admins
      allow write: if isAdmin();
    }
  }
}
