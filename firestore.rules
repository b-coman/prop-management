
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(propertyId) {
      // Assumes propertyId passed is the slug (document ID)
      return isSignedIn() &&
             exists(/databases/$(database)/documents/properties/$(propertyId)) &&
             get(/databases/$(database)/documents/properties/$(propertyId)).data.ownerId == request.auth.uid;
    }

    function isAdmin() {
      // Assumes user document exists and has a 'role' field
      return isSignedIn() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Checks if a custom domain is already in use by another property
    // function domainIsAvailable(domain) {
    //   return !exists(/databases/$(database)/documents/properties/{otherPropertyId}) ||
    //         query(/databases/$(database)/documents/properties).where('customDomain', '==', domain).where('useCustomDomain', '==', true).size() == 0;
    // }

    // Properties collection (using slug as document ID)
    match /properties/{propertySlug} {
      allow read: if true; // Publicly readable

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;

      // Allow update if owner or admin
      // TODO: Add validation for customDomain uniqueness if needed (can be complex)
      allow update: if isOwner(propertySlug) || isAdmin();
                      // Example domain validation (needs refinement/testing):
                      // && (request.resource.data.useCustomDomain == false ||
                      //     (request.resource.data.useCustomDomain == true && request.resource.data.customDomain is string)) // Add length/format check?

      allow delete: if isOwner(propertySlug) || isAdmin();
    }

     // PropertyOverrides collection (using slug as document ID)
    match /propertyOverrides/{propertySlug} {
        allow read: if true; // Publicly readable for website rendering
        allow write: if isOwner(propertySlug) || isAdmin(); // Only owner or admin can modify overrides
    }


    // Availability collection (using {propertySlug}_{YYYY-MM} as document ID)
    match /availability/{availabilityId} {
      allow read: if true; // Publicly readable for calendar display

      // Allow write if the booking creation logic runs with authenticated user context (owner/admin)
      // Or allow if triggered by a secure server process (like a Cloud Function)
      // For now, allowing signed-in users for simplicity during development. Refine this for production.
      allow write: if isSignedIn(); // Simpler rule for now, refine later
                      // More secure rule: if isOwner(availabilityId.split('_')[0]) || isAdmin();
    }

    // Bookings collection (using auto-generated ID)
    match /bookings/{bookingId} {
      // Allow creation from the client (e.g., during checkout)
      allow create: if true; // Allow any user to create a PENDING booking

      // Allow read/update if the user is the guest associated with the booking,
      // the property owner, or an admin.
      // Note: Requires guestInfo.userId to be set correctly during booking creation if using isGuest check.
      allow read, update: if isSignedIn() &&
                            (request.auth.uid == resource.data.guestInfo.userId ||
                             isOwner(resource.data.propertyId) ||
                             isAdmin());

      // Allow deletion only by admin (or potentially owner)
      allow delete: if isAdmin();
    }

    // Users collection (using auth user ID as document ID)
    match /users/{userId} {
      // Allow users to read/write their own profile, admins can read/write any profile
      allow read, write: if request.auth.uid == userId || isAdmin();
    }

    // Reviews collection (using auto-generated ID)
    match /reviews/{reviewId} {
      allow read: if true; // Publicly readable
      allow create: if isSignedIn(); // Must be signed in to leave a review
      allow update, delete: if isAdmin(); // Only admins can modify/delete reviews
    }

    // App Config (e.g., currency rates)
    match /appConfig/{configDocId} {
        allow read: if true; // Allow public read for currency rates, etc.
        allow write: if isAdmin(); // Only admins can update configuration
    }

    // SyncCalendars collection (using auto-generated ID)
    match /syncCalendars/{syncDocId} {
      allow read, write: if isSignedIn() &&
                            (isOwner(resource.data.propertyId) || isAdmin());
    }

     // AvailabilityAlerts collection (using auto-generated ID)
    match /availabilityAlerts/{alertId} {
        allow create: if true; // Allow anyone to request an alert
        allow read, update, delete: if isAdmin(); // Only admin can manage alerts
    }

  }
}
